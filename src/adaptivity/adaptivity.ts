import {buildAnswersValidator} from "../util/validateAnswers";
import {AdaptivityScales, createBlankScales, RawAdaptivityScales} from "./scales";

const validate = buildAnswersValidator(165, ["+", "-"], createBlankScales(NaN));

type RawCalculationSchema = {
    [P in keyof RawAdaptivityScales]: {
        "+": number[];
        "-": number[];
    };
};

const RAW: RawCalculationSchema = {
    L1_L: {
        "+": [],
        "-": [1, 10, 31, 69, 78, 92, 101, 116, 128, 148],
    },
    L1_F: {
        "+": [4, 8, 11, 18, 20, 22, 37, 41, 47, 60, 72, 82, 84, 86, 91, 96, 98, 103, 115, 153],
        "-": [2, 25, 43, 44, 53],
    },
    L1_Ðš: {
        "+": [35],
        "-": [15, 46, 48, 64, 73, 90, 102, 151],
    },
    L1_Hs: {
        "+": [17, 67],
        "-": [2, 3, 5, 23, 38, 53, 55, 58, 62, 75, 93],
    },
    L1_D: {
        "+": [16, 17, 30, 39, 46],
        "-": [5, 14, 23, 26, 27, 32, 34, 50, 52, 53, 54, 55, 67, 68, 77, 102],
    },
    L1_Hy: {
        "+": [11, 17, 20, 21, 28, 65, 67],
        "-": [2, 3, 23, 33, 38, 42, 45, 48, 53, 58, 61, 62, 64, 75, 88, 90, 95, 97, 99],
    },
    L1_Pd: {
        "+": [6, 8, 11, 12, 14, 41, 42, 56, 72, 81, 82, 91, 114],
        "-": [13, 35, 45, 48, 55, 79, 90, 97, 100, 102],
    },
    L1_Mf: {
        "+": [63, 66, 73],
        "-": [9, 43, 50, 74, 86, 87],
    },
    L1_Pa: {
        "+": [4, 7, 8, 10, 18, 39, 43, 46, 48, 98, 104, 125, 150, 152],
        "-": [33, 42, 84, 137, 145, 155],
    },
    L1_Pt: {
        "+": [7, 10, 11, 16, 28, 30, 37, 41, 67, 73, 80, 88, 103, 104, 110, 117, 120, 122, 123],
        "-": [2, 52],
    },
    L1_Sc: {
        "+": [4, 6, 7, 8, 10, 11, 12, 14, 16, 21, 24, 36, 39, 56, 60, 63, 70, 80, 89, 98, 103, 105, 106, 108, 111, 119, 123, 124],
        "-": [13, 38, 44, 66, 107],
    },
    L1_Ma: {
        "+": [6, 7, 27, 36, 42, 49, 56, 59, 76, 77, 80, 89, 90, 93, 95],
        "-": [40, 43, 64, 96],
    },
    L1_Si: {
        "+": [64, 85, 126, 160, 163],
        "-": [12, 49, 90, 74, 144, 147, 159],
    },
    L2_AS: {
        "+": [16, 20, 28, 29, 30, 39, 57, 65, 67, 68, 70, 73, 86, 90, 96, 103, 104, 108, 110, 113, 115, 119, 122, 123, 124, 131, 137, 139, 154, 155, 156, 158],
        "-": [2, 5, 23, 26, 44, 53, 55, 62, 75, 87, 147],
    },
    L2_PS: {
        "+": [7, 8, 15, 22, 24, 33, 36, 42, 43, 46, 47, 50, 59, 60, 71, 72, 82, 83, 91, 93, 102, 107, 114, 117, 141, 142, 150, 151, 153, 162, 164],
        "-": [35, 134, 160],
    },
    L2_DAN: {
        "+": [7, 8, 15, 16, 20, 22, 24, 28, 29, 30, 33, 36, 39, 42, 43, 46, 47, 50, 57, 59, 60, 65, 67, 68, 70, 71, 72, 73, 82, 83, 86, 90, 91, 93, 96, 102, 103, 104, 107, 108, 110, 113, 114, 115, 117, 119, 122, 123, 124, 131, 137, 139, 141, 142, 150, 151, 153, 154, 155, 156, 158, 162, 164],
        "-": [2, 5, 23, 26, 35, 44, 53, 55, 62, 75, 87, 134, 147, 160],
    },
    L3_TRUST: {
        "+": [],
        "-": [1, 10, 11, 19, 31, 51, 69, 78, 92, 101, 116, 128, 138, 148],
    },
    L3_KP: {
        "+": [9, 24, 27, 33, 43, 46, 61, 64, 81, 88, 90, 99, 104, 106, 114, 121, 126, 133, 142, 151, 152],
        "-": [26, 34, 35, 48, 74, 85, 107, 130, 144, 147, 159],
    },
    L3_MP: {
        "+": [14, 22, 36, 42, 50, 56, 59, 72, 77, 79, 91, 93, 125, 141, 145, 150, 164, 165],
        "-": [13, 76, 97, 100, 160, 163],
    },
    L3_PR: {
        "+": [4, 6, 7, 8, 11, 12, 15, 16, 17, 18, 20, 21, 28, 29, 30, 37, 39, 40, 41, 47, 57, 60, 63, 65, 67, 68, 70, 71, 73, 80, 82, 83, 84, 86, 89, 94, 95, 96, 98, 102, 103, 108, 109, 110, 111, 112, 113, 115, 117, 118, 119, 120, 122, 123, 124, 127, 129, 131, 135, 136, 137, 139, 143, 146, 149, 153, 154, 155, 156, 157, 158, 161, 162],
        "-": [2, 3, 5, 23, 25, 32, 38, 44, 45, 49, 52, 53, 54, 55, 58, 62, 66, 75, 87, 105, 127, 132, 134, 140],
    },
    L4_LAP: {
        "+": [4, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 24, 27, 28, 29, 30, 33, 36, 37, 39, 40, 41, 42, 43, 46, 47, 50, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 70, 71, 72, 73, 77, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 93, 94, 95, 96, 98, 99, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 133, 135, 136, 137, 139, 141, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165],
        "-": [2, 3, 5, 13, 23, 25, 26, 32, 34, 35, 38, 44, 45, 48, 49, 52, 53, 54, 55, 58, 62, 66, 74, 75, 76, 85, 87, 97, 100, 105, 107, 130, 132, 134, 140, 144, 147, 159, 160, 163],
    },
};

const L3_STEN = {
    KP: [[], [27, 31], [22, 26], [17, 21], [13, 16], [10, 12], [7, 9], [5, 6], [3, 4], [1, 2], [0, 0]],
    MN: [[], [18], [15, 17], [12, 14], [10, 11], [7, 9], [5, 6], [3, 4], [2], [1], [0, 0]],
    PR: [[], [46], [38, 45], [30, 37], [22, 29], [16, 21], [13, 15], [9, 12], [6, 8], [4, 5], [0, 3]],
};

const L4_STEN = {
    "LAP(17-20)": [[], [58], [47, 57], [40, 46], [33, 39], [27, 32], [23, 26], [18, 22], [15, 17], [12, 14], [1, 11]],
    "LAP(27-35)": [[], [61], [51, 60], [40, 50], [33, 39], [28, 32], [22, 27], [16, 21], [11, 15], [6, 10], [1, 5]],
};

const reducer = <T>(s: T): T => s;

function calculate(answers: number[]) {
    return answers.reduce(reducer, createBlankScales(0));
}

export default function adaptivity(answers): AdaptivityScales {
    return validate(answers) || createBlankScales(calculate(answers));
}
